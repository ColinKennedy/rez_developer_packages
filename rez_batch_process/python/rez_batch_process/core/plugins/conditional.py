#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""The main classes that are used to filter out Rez packages from getting processed."""

import argparse
import sys

from python_compatibility.sphinx import conf_manager
from rez_utilities import finder, inspection

from .. import exceptions, rez_git
from ..gitter import git_link


def _is_keep_temporary_files_enabled():
    """bool: If True, don't delete any file(s)/folder(s) generated by this class."""
    user_input = sys.argv[1:]
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-k",
        "--keep-temporary-files",
        action="store_true",
        help="If added, do not delete any temporary files that are generated during this run.",
    )

    namespace, _ = parser.parse_known_args(user_input)

    return namespace.keep_temporary_files


def _get_temporary_directory():
    """str: The folder, if any, where temporary repositories will be cloned to."""
    user_input = sys.argv[1:]
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-t",
        "--temporary-directory",
        help="A folder on-disk that will be used to clone git repositories.",
    )

    namespace, _ = parser.parse_known_args(user_input)

    return namespace.temporary_directory


def has_documentation(package):
    """Check if the given Rez package has documentation already.

    The logic for this function is bit involved.

    There are 2 "categories" of Rez packages

    - source Rez packages (packages that haven't been built/installed/released yet).
    - built/installed/released packages.

    Built Rez packages may not actually have documentation installed
    with the package. So if documentation is missing, you have to
    check the repository that the package came from to be totally
    sure. You can clone the repository and check it locally or check
    the repository remotely (doing it remotely is much faster but is
    also more complex).

    Source Rez packages however contain 100% of the package
    definition plus its documentation configuration files. So
    we only need to query for files on-disk to figure out if
    documentation is missing this function is given a source Rez
    package.

    Args:
        package (:class:`rez.packages_.Package`):
            The Rez package to check for existing documentation.

    Raises:
        :class:`exceptions.NoGitRepository`:
            If a repository URL was found but the remote repository
            could not be reached.

    Returns:
        str: A generic message saying that the package already has documentation.

    """
    if not inspection.is_built_package(package):
        root = finder.get_package_root(package)

        if conf_manager.get_conf_file(root):
            return True

    repository = rez_git.get_repository_url(package)

    if not repository:
        raise exceptions.NoGitRepository(
            package,
            finder.get_package_root(package),
            "A built Rez package was found but it has no git repository.",
        )

    keep = _is_keep_temporary_files_enabled()
    directory = _get_temporary_directory()

    remote_file = git_link.has_package_conf(
        repository, package.name, directory=directory, keep=keep
    )

    if remote_file:
        return True

    return False


def is_not_a_python_package(package):
    """Check if the given package has at least one Python package / file inside of it.

    Args:
        package (:class:`rez.packages_.Package`): The Rez package to check for Python packages.

    Returns:
        str: A generic message to report if this class finds a non-python Rez package.

    """
    return not inspection.has_python_package(package)


def get_default_latest_packages(paths=None):
    """Get the latest version of every Rez package family.

    Args:
        paths (list[str], optional):
            The directories to search for Rez package families,
            Default: :attr:`rez.config.config.packages_path`.

    Returns:
        tuple[:class:`rez.packages_.Package`, list, list]:
            All of the found Rez packages and a list of any Rez package
            that was considered invalid or any Rez packages that were
            valid but must be skipped, for some reason.

    """
    packages = list(inspection.iter_latest_packages(paths=paths))

    return packages, [], []
